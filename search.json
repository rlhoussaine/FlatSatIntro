[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "End-to-End FlatSat Service Overview",
    "section": "",
    "text": "Welcome to the Flatsat team! These upcoming pages serve as a supplement to the various meetings you’ll attend upon joining, rather than replacing them. Here, we won’t cover the company’s overall history, broader projects, or general onboarding, but will focus specifically on the activities tied to the Flatsat team and the Flatsat-related developments.\nIn summary, we’ll start with a brief introduction to the Endurance project to set the context, then discuss the purpose of developing a flatsat and its practical implementation within the project. Finally, we’ll explore the current testing phase regarding telecommunications between ground software and the flatsat components. We’ll begin with simple, direct communication over communication channels before advancing to a more complex setup that includes radio communication.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "End-to-End FlatSat Service Overview",
    "section": "",
    "text": "Welcome to the Flatsat team! These upcoming pages serve as a supplement to the various meetings you’ll attend upon joining, rather than replacing them. Here, we won’t cover the company’s overall history, broader projects, or general onboarding, but will focus specifically on the activities tied to the Flatsat team and the Flatsat-related developments.\nIn summary, we’ll start with a brief introduction to the Endurance project to set the context, then discuss the purpose of developing a flatsat and its practical implementation within the project. Finally, we’ll explore the current testing phase regarding telecommunications between ground software and the flatsat components. We’ll begin with simple, direct communication over communication channels before advancing to a more complex setup that includes radio communication.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#how-to-read-this-document",
    "href": "index.html#how-to-read-this-document",
    "title": "End-to-End FlatSat Service Overview",
    "section": "How to Read This Document",
    "text": "How to Read This Document\nThe goal of this document is to start with a quick overview of the Endurance project and gradually zoom in on the Flatsat’s implementation, leading to the current activities where new team members can find their starting point. By following each page in sequence, you should gain a deeper understanding of how and why we are developing the flatsat.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#whats-next",
    "href": "index.html#whats-next",
    "title": "End-to-End FlatSat Service Overview",
    "section": "What’s Next?",
    "text": "What’s Next?\nAfter reading these pages, we’ll proceed to practical work and code-related tasks. The practical aspects are grouped in a developing library called the Endurance FlatSat Library. We have started drafting usage guides for installing the necessary sub-services to manage specific parts or components of the flatsat. You can find the latest drafted documents here (non-validated): ReadTheDocs. Please use these guides as needed, but also make sure to raise tickets for any unclear or problematic steps.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#your-contribution-to-this-document",
    "href": "index.html#your-contribution-to-this-document",
    "title": "End-to-End FlatSat Service Overview",
    "section": "Your Contribution to This Document",
    "text": "Your Contribution to This Document\nThe aim is to keep evolving this document over time, beginning with feedback on areas that need correction or addition as you settle in. Later on, you’re encouraged to clone the repository and add new content. The overall goal of this document is to provide any new team member with all the technical information needed to understand the broader purpose of our activities and the functioning of systems and subsystems.\nAdditionally, I’ve included some basic methods for collaborative work on software development projects. As the team grows, it will be necessary to update or add elements so anyone can adhere to our standards for code quality, reviews, ticketing, or broader workflows.\nThis is also an opportunity to add, in a dedicated section, implemented software elements that may be beneficial to the entire company (e.g., how to create GitHub Actions).",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#about",
    "href": "index.html#about",
    "title": "End-to-End FlatSat Service Overview",
    "section": "About",
    "text": "About\nThis document was created with Quarto, an open-source publishing system that allows users to generate and maintain beautifully formatted documents, websites, blogs, and presentations directly from markdown and Jupyter notebooks. Quarto’s versatility in supporting scientific and technical communication makes it an excellent choice for documenting complex projects like Flatsat. It enables you to combine text, code, and outputs seamlessly, creating a comprehensive and interactive resource for our team.\nFor more information on Quarto and how to use it to enhance your documentation projects, visit Quarto’s website.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "flatsat/endurance.html",
    "href": "flatsat/endurance.html",
    "title": "Endurance Overview",
    "section": "",
    "text": "Stationkeeping:\n\nService duration of up to 5 years\n\nOrbital Transfer:\n\nCapability to move the client to any GEO orbital slot or correct inclination\n\nAttitude Control:\n\nFine attitude control with an accuracy of up to 0.04 degrees\n\nEnd-of-Life (EOL) Disposal:\n\nTransfer to a GEO graveyard orbit at the end of operations\n\n\n\n\n\n\n\n\nLife Extension Start: Planned for 2026, marking Endurance as the first French company to achieve Life Extension.\nDevelopment Phases:\n\nPhase A: Successfully completed in 2022\nPhase B:\n\nSystem Requirements Review (SRR) in Q4 2023\nPreliminary Design Review (PDR) in Q1 2024\nEstablishment of Industrial Consortium\nRendezvous (RdV) tests in progress\n\nPhase C:\n\nCritical Design Review (CDR) planned for Q4 2024\nPlatform manufacture and testing\nCompletion of RdV and Docking testing\n\nPhase D:\n\nFlight Model (FM) production and integration\nAcceptance testing\n\nPhase E:\n\nLaunch and commissioning in Q1 2026\nEOR, RdV, docking, and life-extension operations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\nSpecification\n\n\n\n\nMass\n310 kg (dry), 500 kg (wet)\n\n\nVolume\n1 x 1 x 1.2 m³\n\n\nLauncher Compatibility\nAriane 6 / SpaceX Falcon 9 (rideshare passenger)\n\n\nPower\nTwo tracking solar wings\n\n\nArchitecture\nDual string (core avionics)\n\n\nPropulsion (PROP)\nFour EP thrusters (Krypton propellant), eight RCS thrusters\n\n\nCommunications\nDeployable antennas\n\n\n\n\n\n\n\n\n\n\nReaction Control System (RCS): Eight thrusters for maneuvering\nStationkeeping: Two electric propulsion (EP) thrusters\nElectric Orbit Raising (EOR): Two EP thrusters\nFuel Tanks:\n\nOne Krypton tank with a capacity of 155 liters\nFour RCS tanks\n\n\n\n\n\n\nReaction Wheels: Three large reaction wheels for stabilization\nThruster Steering Mechanism: Two degrees of freedom for precise maneuvering\n\n\n\n\n\n\n\nSolar Arrays: Two wings capable of generating up to 2.2 kW\nAntenna Deployables: Two antennas for ground communication while docked\nCustomizable Docking System: Adaptable for docking with most GEO satellites\n\n\nThis outline provides a structured markdown version of your presentation content, ready to use for slides or documentation. Let me know if you need more details on any section!",
    "crumbs": [
      "Endurance Overview"
    ]
  },
  {
    "objectID": "flatsat/endurance.html#overview-of-endurance-services",
    "href": "flatsat/endurance.html#overview-of-endurance-services",
    "title": "Endurance Overview",
    "section": "",
    "text": "Stationkeeping:\n\nService duration of up to 5 years\n\nOrbital Transfer:\n\nCapability to move the client to any GEO orbital slot or correct inclination\n\nAttitude Control:\n\nFine attitude control with an accuracy of up to 0.04 degrees\n\nEnd-of-Life (EOL) Disposal:\n\nTransfer to a GEO graveyard orbit at the end of operations",
    "crumbs": [
      "Endurance Overview"
    ]
  },
  {
    "objectID": "flatsat/endurance.html#project-achievements-and-future-goals",
    "href": "flatsat/endurance.html#project-achievements-and-future-goals",
    "title": "Endurance Overview",
    "section": "",
    "text": "Life Extension Start: Planned for 2026, marking Endurance as the first French company to achieve Life Extension.\nDevelopment Phases:\n\nPhase A: Successfully completed in 2022\nPhase B:\n\nSystem Requirements Review (SRR) in Q4 2023\nPreliminary Design Review (PDR) in Q1 2024\nEstablishment of Industrial Consortium\nRendezvous (RdV) tests in progress\n\nPhase C:\n\nCritical Design Review (CDR) planned for Q4 2024\nPlatform manufacture and testing\nCompletion of RdV and Docking testing\n\nPhase D:\n\nFlight Model (FM) production and integration\nAcceptance testing\n\nPhase E:\n\nLaunch and commissioning in Q1 2026\nEOR, RdV, docking, and life-extension operations",
    "crumbs": [
      "Endurance Overview"
    ]
  },
  {
    "objectID": "flatsat/endurance.html#endurance-summary",
    "href": "flatsat/endurance.html#endurance-summary",
    "title": "Endurance Overview",
    "section": "",
    "text": "Parameter\nSpecification\n\n\n\n\nMass\n310 kg (dry), 500 kg (wet)\n\n\nVolume\n1 x 1 x 1.2 m³\n\n\nLauncher Compatibility\nAriane 6 / SpaceX Falcon 9 (rideshare passenger)\n\n\nPower\nTwo tracking solar wings\n\n\nArchitecture\nDual string (core avionics)\n\n\nPropulsion (PROP)\nFour EP thrusters (Krypton propellant), eight RCS thrusters\n\n\nCommunications\nDeployable antennas",
    "crumbs": [
      "Endurance Overview"
    ]
  },
  {
    "objectID": "flatsat/endurance.html#detailed-system-overview",
    "href": "flatsat/endurance.html#detailed-system-overview",
    "title": "Endurance Overview",
    "section": "",
    "text": "Reaction Control System (RCS): Eight thrusters for maneuvering\nStationkeeping: Two electric propulsion (EP) thrusters\nElectric Orbit Raising (EOR): Two EP thrusters\nFuel Tanks:\n\nOne Krypton tank with a capacity of 155 liters\nFour RCS tanks\n\n\n\n\n\n\nReaction Wheels: Three large reaction wheels for stabilization\nThruster Steering Mechanism: Two degrees of freedom for precise maneuvering",
    "crumbs": [
      "Endurance Overview"
    ]
  },
  {
    "objectID": "flatsat/endurance.html#external-features-of-endurance",
    "href": "flatsat/endurance.html#external-features-of-endurance",
    "title": "Endurance Overview",
    "section": "",
    "text": "Solar Arrays: Two wings capable of generating up to 2.2 kW\nAntenna Deployables: Two antennas for ground communication while docked\nCustomizable Docking System: Adaptable for docking with most GEO satellites\n\n\nThis outline provides a structured markdown version of your presentation content, ready to use for slides or documentation. Let me know if you need more details on any section!",
    "crumbs": [
      "Endurance Overview"
    ]
  },
  {
    "objectID": "flatsat/platform.html",
    "href": "flatsat/platform.html",
    "title": "Rewind on Satellite platform and subsystems",
    "section": "",
    "text": "graph TD\n    A[**Subsystems**]:::main\n    A --&gt; B[**Payload**]\n    A --&gt; C[**Power Subsystem**]\n    A --&gt; D[**Propulsion Subsystem**]\n    A --&gt; E[**Structure Subsystem**]\n    A --&gt; F[**Thermal Subsystem**]\n    A --&gt; G[**AOCS**&lt;br&gt;**Attitude and Orbit Control System**]\n    A --&gt; H[**TM/TC Subsystem**]\n    A --&gt; I[**OBC Subsystem**]\n\n    classDef main font-size:30px, font-weight:bold, color:#ffffff;\n    classDef payload fill:#a05a87, stroke:#000, stroke-width:1px, font-size:24px, color:#ffffff;\n    classDef power fill:#5f8b95, stroke:#000, stroke-width:1px, font-size:24px, color:#ffffff;\n    classDef propulsion fill:#999999, stroke:#000, stroke-width:1px, font-size:24px, color:#ffffff;\n    classDef structure fill:#4a66a1, stroke:#000, stroke-width:1px, font-size:24px, color:#ffffff;\n    classDef thermal fill:#c49d1d, stroke:#000, stroke-width:1px, font-size:24px, color:#ffffff;\n    classDef aocs fill:#7f4f7f, stroke:#000, stroke-width:1px, font-size:24px, color:#ffffff;\n    classDef tmtc fill:#a69d19, stroke:#000, stroke-width:1px, font-size:24px, color:#ffffff;\n    classDef obc fill:#3b9cc4, stroke:#000, stroke-width:1px, font-size:24px, color:#ffffff;\n\n    class B payload;\n    class C power;\n    class D propulsion;\n    class E structure;\n    class F thermal;\n    class G aocs;\n    class H tmtc;\n    class I obc;\n\n\n\n\n\n\n\n\n\n\nComponents:\n\nSolar Panels: Generate electrical power by converting solar energy.\nBatteries: Store energy for use when the satellite is in Earth’s shadow.\n\nPurpose: Provides and regulates power for all satellite subsystems.\nPower Output: Typically between 10 and 20 kW, depending on satellite design and mission requirements.\n\n\n\n\n\n\ngraph TD\n    A[Power Subsystem] --&gt; B[Solar Panels]\n    A --&gt; C[Batteries]\n    B --&gt; D[Generate Power]\n    C --&gt; E[Store Power]\n\n\n\n\n\n\n\n\n\n\nFunctions:\n\nPositioning (Initial Orbit Insertion): Places the satellite in its intended geostationary orbit.\nStation Keeping: Maintains satellite’s position against gravitational forces.\nDeorbiting: Ensures controlled descent at the end of the mission, removing the satellite from orbit.\n\nTypes of Propulsion:\n\nChemical Propulsion: Provides high thrust for orbit changes.\nElectric Propulsion: Efficient for station-keeping maneuvers, using less fuel over time.\n\n\n\n\n\n\n\ngraph TD\n    F[Propulsion Subsystem] --&gt; G[Positioning]\n    F --&gt; H[Station Keeping]\n    F --&gt; I[Deorbiting]\n    G --&gt; J[Chemical Propulsion]\n    H --&gt; K[Electric Propulsion]\n\n\n\n\n\n\n\n\n\n\nPurpose: Provides mechanical integrity, ensuring satellite withstands the physical stresses during launch and operation.\nStress Factors:\n\nAcceleration: Up to 4.5 g during launch.\nAcoustic Pressure: Up to 140 dB due to intense launch sounds.\n\nComponents: Reinforced frame and materials designed for durability in the harsh space environment.\n\n\n\n\n\n\ngraph TD\n    L[Structure Subsystem] --&gt; M[Handles Launch Stresses]\n    M --&gt; N[Acceleration: up to 4.5 g]\n    M --&gt; O[Acoustic Pressure: up to 140 dB]\n\n\n\n\n\n\n\n\n\n\nFunction: Manages satellite temperature, preventing overheating or freezing of sensitive components.\nChallenges:\n\nSpace Temperature Variability: -120°C to +150°C.\n\nOptimal Temperature Ranges:\n\nBatteries: 0°C to +10°C.\nElectronics: 10°C to +45°C.\nAntennas: -150°C to +80°C.\n\nThermal Control Techniques:\n\nRadiators and Heat Pipes: Dissipate excess heat.\nInsulation: Protects against extreme cold.\n\n\n\n\n\n\n\ngraph TD\n    P[Thermal Subsystem] --&gt; Q[Temperature Management]\n    Q --&gt; R[Space Temperature: -120 to +150 degrees celsius]\n    Q --&gt; S[Controlled Ranges]\n    S --&gt; T[Batteries: 0  to +10 degrees celsius]\n    S --&gt; U[Electronics: 10  to +45 degrees celsius]\n    S --&gt; V[Antennas: -150 to +80 degrees celsius]\n\n\n\n\n\n\n\n\n\n\nPurpose: Maintains the satellite’s orientation and ensures it remains in its designated orbital position.\nComponents:\n\nGyroscopes: Measure orientation.\nReaction Wheels: Control attitude without expending fuel.\nThrusters: Adjust orbit as needed for station keeping.\n\nPositioning Requirements: Accuracy within a few kilometers, with specific orientations for antenna alignment and solar panel exposure.\n\n\n\n\n\n\ngraph TD\n    W[Attitude and Orbit Control System AOCS]\n    W --&gt; X[Maintains Orientation]\n    W --&gt; Y[Controls Orbital Position]\n    X --&gt; Z[Gyroscopes & Reaction Wheels]\n    Y --&gt; AA[Thrusters]\n\n\n\n\n\n\n\n\n\n\nTelemetry (TM): Continuously monitors satellite status and transmits data to ground control.\nTelecommand (TC): Receives commands from ground control to execute operational tasks.\nExample Operations: Power adjustments, orbit corrections, and data collection from sensors.\n\n\n\n\n\n\ngraph TD\n    AB[Telemetry & Telecommand Subsystem TM/TC]\n    AB --&gt; AC[Telemetry]\n    AB --&gt; AD[Telecommand]\n    AC --&gt; AE[Sends Data to Ground]\n    AD --&gt; AF[Receives Commands from Ground]\n\n\n\n\n\n\n\n\n\n\nRole: Acts as the satellite’s central processing unit, managing operations and coordinating responses to commands.\nFunctions:\n\nProcesses data from sensors and telemetry.\nExecutes control commands to other subsystems.\nStores critical mission data.\n\nExample: The OBC on ESA’s BepiColombo mission, which provides autonomous operations for deep space.\n\n\n\n\n\n\ngraph TD\n    AG[Onboard Computer OBC Subsystem]\n    AG --&gt; AH[Processes Data]\n    AG --&gt; AI[Executes Commands]\n    AG --&gt; AJ[Stores Mission Data]\n\n\n\n\n\n\n\nSource of Illustrations: Diagrams inspired by ESA and CNES for satellite subsystems and visualizations of Insat 3A, an Indian telecommunications satellite. ```\nThis expanded Markdown file provides a thorough breakdown of each subsystem, accompanied by Mermaid diagrams to illustrate their components and functions. Let me know if you would like to add further details or additional diagrams.",
    "crumbs": [
      "Endurance Overview",
      "Rewind on Satellite platform and subsystems"
    ]
  },
  {
    "objectID": "flatsat/platform.html#overview",
    "href": "flatsat/platform.html#overview",
    "title": "Rewind on Satellite platform and subsystems",
    "section": "",
    "text": "graph TD\n    A[**Subsystems**]:::main\n    A --&gt; B[**Payload**]\n    A --&gt; C[**Power Subsystem**]\n    A --&gt; D[**Propulsion Subsystem**]\n    A --&gt; E[**Structure Subsystem**]\n    A --&gt; F[**Thermal Subsystem**]\n    A --&gt; G[**AOCS**&lt;br&gt;**Attitude and Orbit Control System**]\n    A --&gt; H[**TM/TC Subsystem**]\n    A --&gt; I[**OBC Subsystem**]\n\n    classDef main font-size:30px, font-weight:bold, color:#ffffff;\n    classDef payload fill:#a05a87, stroke:#000, stroke-width:1px, font-size:24px, color:#ffffff;\n    classDef power fill:#5f8b95, stroke:#000, stroke-width:1px, font-size:24px, color:#ffffff;\n    classDef propulsion fill:#999999, stroke:#000, stroke-width:1px, font-size:24px, color:#ffffff;\n    classDef structure fill:#4a66a1, stroke:#000, stroke-width:1px, font-size:24px, color:#ffffff;\n    classDef thermal fill:#c49d1d, stroke:#000, stroke-width:1px, font-size:24px, color:#ffffff;\n    classDef aocs fill:#7f4f7f, stroke:#000, stroke-width:1px, font-size:24px, color:#ffffff;\n    classDef tmtc fill:#a69d19, stroke:#000, stroke-width:1px, font-size:24px, color:#ffffff;\n    classDef obc fill:#3b9cc4, stroke:#000, stroke-width:1px, font-size:24px, color:#ffffff;\n\n    class B payload;\n    class C power;\n    class D propulsion;\n    class E structure;\n    class F thermal;\n    class G aocs;\n    class H tmtc;\n    class I obc;",
    "crumbs": [
      "Endurance Overview",
      "Rewind on Satellite platform and subsystems"
    ]
  },
  {
    "objectID": "flatsat/platform.html#power-subsystem",
    "href": "flatsat/platform.html#power-subsystem",
    "title": "Rewind on Satellite platform and subsystems",
    "section": "",
    "text": "Components:\n\nSolar Panels: Generate electrical power by converting solar energy.\nBatteries: Store energy for use when the satellite is in Earth’s shadow.\n\nPurpose: Provides and regulates power for all satellite subsystems.\nPower Output: Typically between 10 and 20 kW, depending on satellite design and mission requirements.\n\n\n\n\n\n\ngraph TD\n    A[Power Subsystem] --&gt; B[Solar Panels]\n    A --&gt; C[Batteries]\n    B --&gt; D[Generate Power]\n    C --&gt; E[Store Power]",
    "crumbs": [
      "Endurance Overview",
      "Rewind on Satellite platform and subsystems"
    ]
  },
  {
    "objectID": "flatsat/platform.html#propulsion-subsystem",
    "href": "flatsat/platform.html#propulsion-subsystem",
    "title": "Rewind on Satellite platform and subsystems",
    "section": "",
    "text": "Functions:\n\nPositioning (Initial Orbit Insertion): Places the satellite in its intended geostationary orbit.\nStation Keeping: Maintains satellite’s position against gravitational forces.\nDeorbiting: Ensures controlled descent at the end of the mission, removing the satellite from orbit.\n\nTypes of Propulsion:\n\nChemical Propulsion: Provides high thrust for orbit changes.\nElectric Propulsion: Efficient for station-keeping maneuvers, using less fuel over time.\n\n\n\n\n\n\n\ngraph TD\n    F[Propulsion Subsystem] --&gt; G[Positioning]\n    F --&gt; H[Station Keeping]\n    F --&gt; I[Deorbiting]\n    G --&gt; J[Chemical Propulsion]\n    H --&gt; K[Electric Propulsion]",
    "crumbs": [
      "Endurance Overview",
      "Rewind on Satellite platform and subsystems"
    ]
  },
  {
    "objectID": "flatsat/platform.html#structure-subsystem",
    "href": "flatsat/platform.html#structure-subsystem",
    "title": "Rewind on Satellite platform and subsystems",
    "section": "",
    "text": "Purpose: Provides mechanical integrity, ensuring satellite withstands the physical stresses during launch and operation.\nStress Factors:\n\nAcceleration: Up to 4.5 g during launch.\nAcoustic Pressure: Up to 140 dB due to intense launch sounds.\n\nComponents: Reinforced frame and materials designed for durability in the harsh space environment.\n\n\n\n\n\n\ngraph TD\n    L[Structure Subsystem] --&gt; M[Handles Launch Stresses]\n    M --&gt; N[Acceleration: up to 4.5 g]\n    M --&gt; O[Acoustic Pressure: up to 140 dB]",
    "crumbs": [
      "Endurance Overview",
      "Rewind on Satellite platform and subsystems"
    ]
  },
  {
    "objectID": "flatsat/platform.html#thermal-subsystem",
    "href": "flatsat/platform.html#thermal-subsystem",
    "title": "Rewind on Satellite platform and subsystems",
    "section": "",
    "text": "Function: Manages satellite temperature, preventing overheating or freezing of sensitive components.\nChallenges:\n\nSpace Temperature Variability: -120°C to +150°C.\n\nOptimal Temperature Ranges:\n\nBatteries: 0°C to +10°C.\nElectronics: 10°C to +45°C.\nAntennas: -150°C to +80°C.\n\nThermal Control Techniques:\n\nRadiators and Heat Pipes: Dissipate excess heat.\nInsulation: Protects against extreme cold.\n\n\n\n\n\n\n\ngraph TD\n    P[Thermal Subsystem] --&gt; Q[Temperature Management]\n    Q --&gt; R[Space Temperature: -120 to +150 degrees celsius]\n    Q --&gt; S[Controlled Ranges]\n    S --&gt; T[Batteries: 0  to +10 degrees celsius]\n    S --&gt; U[Electronics: 10  to +45 degrees celsius]\n    S --&gt; V[Antennas: -150 to +80 degrees celsius]",
    "crumbs": [
      "Endurance Overview",
      "Rewind on Satellite platform and subsystems"
    ]
  },
  {
    "objectID": "flatsat/platform.html#attitude-and-orbit-control-system-aocs",
    "href": "flatsat/platform.html#attitude-and-orbit-control-system-aocs",
    "title": "Rewind on Satellite platform and subsystems",
    "section": "",
    "text": "Purpose: Maintains the satellite’s orientation and ensures it remains in its designated orbital position.\nComponents:\n\nGyroscopes: Measure orientation.\nReaction Wheels: Control attitude without expending fuel.\nThrusters: Adjust orbit as needed for station keeping.\n\nPositioning Requirements: Accuracy within a few kilometers, with specific orientations for antenna alignment and solar panel exposure.\n\n\n\n\n\n\ngraph TD\n    W[Attitude and Orbit Control System AOCS]\n    W --&gt; X[Maintains Orientation]\n    W --&gt; Y[Controls Orbital Position]\n    X --&gt; Z[Gyroscopes & Reaction Wheels]\n    Y --&gt; AA[Thrusters]",
    "crumbs": [
      "Endurance Overview",
      "Rewind on Satellite platform and subsystems"
    ]
  },
  {
    "objectID": "flatsat/platform.html#telemetry-and-telecommand-tmtc-subsystem",
    "href": "flatsat/platform.html#telemetry-and-telecommand-tmtc-subsystem",
    "title": "Rewind on Satellite platform and subsystems",
    "section": "",
    "text": "Telemetry (TM): Continuously monitors satellite status and transmits data to ground control.\nTelecommand (TC): Receives commands from ground control to execute operational tasks.\nExample Operations: Power adjustments, orbit corrections, and data collection from sensors.\n\n\n\n\n\n\ngraph TD\n    AB[Telemetry & Telecommand Subsystem TM/TC]\n    AB --&gt; AC[Telemetry]\n    AB --&gt; AD[Telecommand]\n    AC --&gt; AE[Sends Data to Ground]\n    AD --&gt; AF[Receives Commands from Ground]",
    "crumbs": [
      "Endurance Overview",
      "Rewind on Satellite platform and subsystems"
    ]
  },
  {
    "objectID": "flatsat/platform.html#onboard-computer-obc-subsystem",
    "href": "flatsat/platform.html#onboard-computer-obc-subsystem",
    "title": "Rewind on Satellite platform and subsystems",
    "section": "",
    "text": "Role: Acts as the satellite’s central processing unit, managing operations and coordinating responses to commands.\nFunctions:\n\nProcesses data from sensors and telemetry.\nExecutes control commands to other subsystems.\nStores critical mission data.\n\nExample: The OBC on ESA’s BepiColombo mission, which provides autonomous operations for deep space.\n\n\n\n\n\n\ngraph TD\n    AG[Onboard Computer OBC Subsystem]\n    AG --&gt; AH[Processes Data]\n    AG --&gt; AI[Executes Commands]\n    AG --&gt; AJ[Stores Mission Data]\n\n\n\n\n\n\n\nSource of Illustrations: Diagrams inspired by ESA and CNES for satellite subsystems and visualizations of Insat 3A, an Indian telecommunications satellite. ```\nThis expanded Markdown file provides a thorough breakdown of each subsystem, accompanied by Mermaid diagrams to illustrate their components and functions. Let me know if you would like to add further details or additional diagrams.",
    "crumbs": [
      "Endurance Overview",
      "Rewind on Satellite platform and subsystems"
    ]
  },
  {
    "objectID": "flatsat/swdev.html",
    "href": "flatsat/swdev.html",
    "title": "Software development on the flatsat",
    "section": "",
    "text": "GitFlow is a branching strategy designed to streamline development, testing, and deployment processes in larger projects. It defines structured branches and workflows for managing features, releases, and urgent fixes in a way that maintains a stable codebase and enables continuous development.\n\n\n\nGitFlow primarily uses five branch types:\n\nMain (master): The stable branch reflecting the current production code. Only release and hotfix branches are merged into main, maintaining its stability.\nDevelop: This branch holds the latest accepted developments. New features and improvements are merged into develop, which serves as the basis for release branches.\nFeature: Created from develop to work on new features or enhancements. Feature branches are short-lived and must be integrated back into develop after completion.\nRelease: Created from develop when preparing for a new release. This branch allows final testing and bug fixes before merging into both main and develop.\nHotfix: Used for critical fixes that need to be deployed immediately. Hotfix branches are based on main and merged back into both main and develop upon completion.\n\n\n\n\n\n\nFeature Development:\n\nStart a feature branch from develop using a clear prefix like feature/feature-name.\nImplement the feature, commit changes, and push the branch if needed.\nUpon completion, merge the feature branch back into develop and delete it.\n\nPreparing a Release:\n\nWhen develop is stable and ready for a release, create a release branch (e.g., release/1.0).\nFinalize minor adjustments and version updates on the release branch.\nOnce testing and fixes are complete, merge it into both main and develop. Tag this commit for reference.\n\nHotfixes:\n\nHotfixes are created directly from main for urgent production issues.\nAfter the fix, merge the hotfix branch into both main and develop to ensure the codebase remains consistent.\n\n\n\n\n\n\nTo optimize GitFlow usage and maintain a smooth development process, consider the following practices:\n\nFrequent Commits and Atomic Changes: Make small, focused commits to ease code reviews and bug tracking.\nClear Branch Naming Conventions: Use prefixes (feature/, release/, hotfix/) for clarity in identifying branch purposes.\nDescriptive Commit Messages: Document each change with a concise message to aid in tracking and debugging.\nAutomate Testing and CI/CD: Run automated tests on all branches to catch issues early, ensuring only stable code reaches main.\nPull Requests for Merges: Use pull requests for merging to ensure code reviews and prevent conflicts.\n\n\n\n\n\n\nImproved Collaboration: Clearly defined branches reduce merge conflicts and enhance teamwork.\nStable Main Branch: Maintains production stability, allowing hotfixes without disrupting ongoing development.\nEnhanced Version Control: Organizes commits by type (feature, fix, release), helping trace development progress.\n\n\n\n\n\nGitFlow is well-suited for projects with scheduled releases, complex development, and continuous deployment needs. By enforcing structure, GitFlow enables teams to maintain a stable production environment while fostering agile development.\nFor more details on GitFlow and best practices, refer to Atlassian’s GitFlow Tutorial, GitKraken’s Workflow Guide, and Stackademic’s Guide. ```",
    "crumbs": [
      "Endurance Overview",
      "Software development on the flatsat"
    ]
  },
  {
    "objectID": "flatsat/swdev.html#branching-model",
    "href": "flatsat/swdev.html#branching-model",
    "title": "Software development on the flatsat",
    "section": "",
    "text": "GitFlow primarily uses five branch types:\n\nMain (master): The stable branch reflecting the current production code. Only release and hotfix branches are merged into main, maintaining its stability.\nDevelop: This branch holds the latest accepted developments. New features and improvements are merged into develop, which serves as the basis for release branches.\nFeature: Created from develop to work on new features or enhancements. Feature branches are short-lived and must be integrated back into develop after completion.\nRelease: Created from develop when preparing for a new release. This branch allows final testing and bug fixes before merging into both main and develop.\nHotfix: Used for critical fixes that need to be deployed immediately. Hotfix branches are based on main and merged back into both main and develop upon completion.",
    "crumbs": [
      "Endurance Overview",
      "Software development on the flatsat"
    ]
  },
  {
    "objectID": "flatsat/swdev.html#workflow-process",
    "href": "flatsat/swdev.html#workflow-process",
    "title": "Software development on the flatsat",
    "section": "",
    "text": "Feature Development:\n\nStart a feature branch from develop using a clear prefix like feature/feature-name.\nImplement the feature, commit changes, and push the branch if needed.\nUpon completion, merge the feature branch back into develop and delete it.\n\nPreparing a Release:\n\nWhen develop is stable and ready for a release, create a release branch (e.g., release/1.0).\nFinalize minor adjustments and version updates on the release branch.\nOnce testing and fixes are complete, merge it into both main and develop. Tag this commit for reference.\n\nHotfixes:\n\nHotfixes are created directly from main for urgent production issues.\nAfter the fix, merge the hotfix branch into both main and develop to ensure the codebase remains consistent.",
    "crumbs": [
      "Endurance Overview",
      "Software development on the flatsat"
    ]
  },
  {
    "objectID": "flatsat/swdev.html#best-practices",
    "href": "flatsat/swdev.html#best-practices",
    "title": "Software development on the flatsat",
    "section": "",
    "text": "To optimize GitFlow usage and maintain a smooth development process, consider the following practices:\n\nFrequent Commits and Atomic Changes: Make small, focused commits to ease code reviews and bug tracking.\nClear Branch Naming Conventions: Use prefixes (feature/, release/, hotfix/) for clarity in identifying branch purposes.\nDescriptive Commit Messages: Document each change with a concise message to aid in tracking and debugging.\nAutomate Testing and CI/CD: Run automated tests on all branches to catch issues early, ensuring only stable code reaches main.\nPull Requests for Merges: Use pull requests for merging to ensure code reviews and prevent conflicts.",
    "crumbs": [
      "Endurance Overview",
      "Software development on the flatsat"
    ]
  },
  {
    "objectID": "flatsat/swdev.html#advantages-of-gitflow",
    "href": "flatsat/swdev.html#advantages-of-gitflow",
    "title": "Software development on the flatsat",
    "section": "",
    "text": "Improved Collaboration: Clearly defined branches reduce merge conflicts and enhance teamwork.\nStable Main Branch: Maintains production stability, allowing hotfixes without disrupting ongoing development.\nEnhanced Version Control: Organizes commits by type (feature, fix, release), helping trace development progress.",
    "crumbs": [
      "Endurance Overview",
      "Software development on the flatsat"
    ]
  },
  {
    "objectID": "flatsat/swdev.html#conclusion",
    "href": "flatsat/swdev.html#conclusion",
    "title": "Software development on the flatsat",
    "section": "",
    "text": "GitFlow is well-suited for projects with scheduled releases, complex development, and continuous deployment needs. By enforcing structure, GitFlow enables teams to maintain a stable production environment while fostering agile development.\nFor more details on GitFlow and best practices, refer to Atlassian’s GitFlow Tutorial, GitKraken’s Workflow Guide, and Stackademic’s Guide. ```",
    "crumbs": [
      "Endurance Overview",
      "Software development on the flatsat"
    ]
  },
  {
    "objectID": "learning-more.html",
    "href": "learning-more.html",
    "title": "Learning more",
    "section": "",
    "text": "An excellent overview: Reproducible authoring with Quarto - Mine Çetinkaya-Rundel, Feb 2022 - slides, youtube\nA Quarto tip a day in June 2022, from Mine Çetinkaya-Rundel.\n\n\n\nOpenscapes Champions Lessons Series\nOpenscapes Approach Guide\n\nNASA Earthdata Cloud Cookbook\n\nSee many more examples at the quarto gallery!\n\n\n\nAre you making onboarding documentation? Check out The Fay Lab Manual (now in Quarto!) for inspiration on structure - you could also start there and make it your own.",
    "crumbs": [
      "Learning more"
    ]
  },
  {
    "objectID": "learning-more.html#learn-more",
    "href": "learning-more.html#learn-more",
    "title": "Learning more",
    "section": "",
    "text": "An excellent overview: Reproducible authoring with Quarto - Mine Çetinkaya-Rundel, Feb 2022 - slides, youtube\nA Quarto tip a day in June 2022, from Mine Çetinkaya-Rundel.\n\n\n\nOpenscapes Champions Lessons Series\nOpenscapes Approach Guide\n\nNASA Earthdata Cloud Cookbook\n\nSee many more examples at the quarto gallery!\n\n\n\nAre you making onboarding documentation? Check out The Fay Lab Manual (now in Quarto!) for inspiration on structure - you could also start there and make it your own.",
    "crumbs": [
      "Learning more"
    ]
  },
  {
    "objectID": "flatsat/yamcs.html",
    "href": "flatsat/yamcs.html",
    "title": "About Yamcs",
    "section": "",
    "text": "Yamcs is an open-source software for real-time mission control, providing tools for managing spacecraft and ground systems operations.\n\n\n\nTelemetry Processing: Receives and processes telemetry data in real-time.\nTelecommands: Allows sending commands to satellites or spacecraft.\nAlarms & Notifications: Generates alarms based on configurable thresholds.\nData Replay: Enables users to replay mission data.\nStandards Compliance: Supports standards like CCSDS, CFDP, and XTCE.\n\n\n\n\nTo set up Yamcs, follow the Getting Started Guide. It covers installation, configuration, and basic usage, ideal for new users.\n\n\n\nThe Python Yamcs Client allows integration with Yamcs via Python, supporting telemetry retrieval, commanding, and historical data access, making it suitable for custom mission applications.\n\n\n\nYamcs is Java-based and extendable. Space Applications Services offers professional support, custom development, and training.",
    "crumbs": [
      "Endurance Overview",
      "About Yamcs"
    ]
  },
  {
    "objectID": "flatsat/yamcs.html#key-features",
    "href": "flatsat/yamcs.html#key-features",
    "title": "About Yamcs",
    "section": "",
    "text": "Telemetry Processing: Receives and processes telemetry data in real-time.\nTelecommands: Allows sending commands to satellites or spacecraft.\nAlarms & Notifications: Generates alarms based on configurable thresholds.\nData Replay: Enables users to replay mission data.\nStandards Compliance: Supports standards like CCSDS, CFDP, and XTCE.",
    "crumbs": [
      "Endurance Overview",
      "About Yamcs"
    ]
  },
  {
    "objectID": "flatsat/yamcs.html#getting-started",
    "href": "flatsat/yamcs.html#getting-started",
    "title": "About Yamcs",
    "section": "",
    "text": "To set up Yamcs, follow the Getting Started Guide. It covers installation, configuration, and basic usage, ideal for new users.",
    "crumbs": [
      "Endurance Overview",
      "About Yamcs"
    ]
  },
  {
    "objectID": "flatsat/yamcs.html#python-client",
    "href": "flatsat/yamcs.html#python-client",
    "title": "About Yamcs",
    "section": "",
    "text": "The Python Yamcs Client allows integration with Yamcs via Python, supporting telemetry retrieval, commanding, and historical data access, making it suitable for custom mission applications.",
    "crumbs": [
      "Endurance Overview",
      "About Yamcs"
    ]
  },
  {
    "objectID": "flatsat/yamcs.html#extensions-and-support",
    "href": "flatsat/yamcs.html#extensions-and-support",
    "title": "About Yamcs",
    "section": "",
    "text": "Yamcs is Java-based and extendable. Space Applications Services offers professional support, custom development, and training.",
    "crumbs": [
      "Endurance Overview",
      "About Yamcs"
    ]
  },
  {
    "objectID": "flatsat/flatsat.html",
    "href": "flatsat/flatsat.html",
    "title": "Flatsat Overview",
    "section": "",
    "text": "A FlatSat is a ground-based, test-ready version of a satellite with all its components laid out on a table rather than in a compact structure. This configuration allows for direct access to each subsystem, facilitating testing and troubleshooting in a controlled lab environment.\n\n\nFlatSats are used primarily to test satellite systems and their interoperability before launch, ensuring each component functions correctly. This setup supports end-to-end operations as if in orbit, allowing for command and telemetry testing. For CubeSats, FlatSats provide a low-cost, modular test environment suitable for educational purposes, commercial applications, and experimental payloads.\n\n\n\nA FlatSat for CubeSat might include: - On-Board Computer (OBC) - Power System - Telemetry and Radio System - Attitude and Orbit Control - Navigation Receiver\nAdditional slots are often available for custom hardware or experimental components, such as AI-based detection algorithms or radiation monitoring payloads.\n\n\n\n\nAccessibility: Subsystems are physically separated, making them accessible for individual testing and replacement.\nOperational Simulation: Commands can be sent via a simulated ground station, with telemetry received for analysis.\nFlexibility: Engineers can easily swap or modify components, an asset for educational and fast-paced commercial projects.\nTesting New Technologies: Allows for validation of new components like radiation-tolerant microcontrollers in a representative environment.\n\n\n\n\nESA, NASA, and other space organizations use FlatSats extensively to develop and validate CubeSat technologies, streamline component interoperability, and prepare hardware for space missions.\nFor more details, refer to the ESA page and NASA’s technical documentation.\n\nLet me know if you need further specifics or if there’s a particular section you’d like expanded!",
    "crumbs": [
      "Endurance Overview",
      "Flatsat Overview"
    ]
  },
  {
    "objectID": "flatsat/flatsat.html#purpose-and-use",
    "href": "flatsat/flatsat.html#purpose-and-use",
    "title": "Flatsat Overview",
    "section": "",
    "text": "FlatSats are used primarily to test satellite systems and their interoperability before launch, ensuring each component functions correctly. This setup supports end-to-end operations as if in orbit, allowing for command and telemetry testing. For CubeSats, FlatSats provide a low-cost, modular test environment suitable for educational purposes, commercial applications, and experimental payloads.",
    "crumbs": [
      "Endurance Overview",
      "Flatsat Overview"
    ]
  },
  {
    "objectID": "flatsat/flatsat.html#typical-components",
    "href": "flatsat/flatsat.html#typical-components",
    "title": "Flatsat Overview",
    "section": "",
    "text": "A FlatSat for CubeSat might include: - On-Board Computer (OBC) - Power System - Telemetry and Radio System - Attitude and Orbit Control - Navigation Receiver\nAdditional slots are often available for custom hardware or experimental components, such as AI-based detection algorithms or radiation monitoring payloads.",
    "crumbs": [
      "Endurance Overview",
      "Flatsat Overview"
    ]
  },
  {
    "objectID": "flatsat/flatsat.html#advantages",
    "href": "flatsat/flatsat.html#advantages",
    "title": "Flatsat Overview",
    "section": "",
    "text": "Accessibility: Subsystems are physically separated, making them accessible for individual testing and replacement.\nOperational Simulation: Commands can be sent via a simulated ground station, with telemetry received for analysis.\nFlexibility: Engineers can easily swap or modify components, an asset for educational and fast-paced commercial projects.\nTesting New Technologies: Allows for validation of new components like radiation-tolerant microcontrollers in a representative environment.",
    "crumbs": [
      "Endurance Overview",
      "Flatsat Overview"
    ]
  },
  {
    "objectID": "flatsat/flatsat.html#applications-in-industry-and-research",
    "href": "flatsat/flatsat.html#applications-in-industry-and-research",
    "title": "Flatsat Overview",
    "section": "",
    "text": "ESA, NASA, and other space organizations use FlatSats extensively to develop and validate CubeSat technologies, streamline component interoperability, and prepare hardware for space missions.\nFor more details, refer to the ESA page and NASA’s technical documentation.\n\nLet me know if you need further specifics or if there’s a particular section you’d like expanded!",
    "crumbs": [
      "Endurance Overview",
      "Flatsat Overview"
    ]
  },
  {
    "objectID": "flatsat/can.html",
    "href": "flatsat/can.html",
    "title": "CAN protocols",
    "section": "",
    "text": "# CAN-TS and CANopen Protocols for Embedded Applications\n\n## Overview\nThe CAN-TS (CAN Telemetry Standard) protocol and CANopen are two communication protocols widely used in embedded systems, particularly for systems with constrained resources. While both protocols serve communication needs, each has unique features and is suited to different application environments.\n\n---\n\n## CAN-TS Protocol\n\n### Purpose\nCAN-TS is designed specifically for applications with limited memory, such as embedded systems in aerospace. It provides a streamlined communication method, prioritizing low memory usage while still offering critical functionalities.\n\n### Key Features\n- **Lightweight Design**: Optimized for 8/16-bit architecture, minimizing memory overhead.\n- **Basic Communication Services**: Includes telemetry, telecommand, time synchronization, and bus redundancy management.\n- **Open Source**: Available for free on GitHub, facilitating easy adoption and integration.\n  \n### Advantages\n- **Memory Efficiency**: Ideal for memory-constrained systems.\n- **Robustness**: Engineered for reliability in mission-critical applications like aerospace.\n- **Low Resource Consumption**: Efficiently operates with minimal computational requirements, making it a practical choice for simple devices.\n\n---\n\n## CANopen Protocol\n\n### Purpose\nCANopen is a more comprehensive and flexible protocol, commonly used in industrial applications requiring detailed and extensive communication capabilities. \n\n### Key Features\n- **Device Profiles**: Standardized profiles for various device types (e.g., motion control, sensors).\n- **Communication Objects**: Supports multiple types of data transfer, such as PDO (Process Data Objects) and SDO (Service Data Objects).\n- **Scalability**: Suitable for both simple and complex network structures.\n  \n### Advantages\n- **Wide Applicability**: Used in many industries, including automotive and automation.\n- **Enhanced Functionality**: Offers advanced features like diagnostic services and network management.\n- **Customization**: Flexible configuration options to meet specific needs.\n\n---\n\n## Comparison\n\n| Feature                | CAN-TS                                  | CANopen                                |\n|------------------------|-----------------------------------------|----------------------------------------|\n| **Memory Usage**       | Low, optimized for constrained devices | Higher, requires more memory           |\n| **Typical Use Case**   | Aerospace, simple devices              | Industrial automation, robotics        |\n| **Complexity**         | Lower, easier to implement             | Higher, with more extensive features   |\n| **Availability**       | Open-source, free                      | Often requires licensing               |\n\n---\n\n## Conclusion\nBoth CAN-TS and CANopen serve important roles in the field of embedded systems, each fitting distinct needs. CAN-TS is ideal for memory-limited applications in aerospace, while CANopen provides extensive support for complex industrial setups.\n\nFor more detailed information, see the full document on the [ESA website](https://indico.esa.int/event/276/contributions/4535/attachments/3482/4593/W32_-_CAN-TS_protocol_for_memory_constrained_embedded_application.pdf).",
    "crumbs": [
      "Endurance Overview",
      "CAN protocols"
    ]
  },
  {
    "objectID": "flatsat/spacepackets.html",
    "href": "flatsat/spacepackets.html",
    "title": "Space Packets Protocols",
    "section": "",
    "text": "The CCSDS standards cover space communication protocols to ensure interoperability between agencies. These documents define three main protocols: - Space Packet Protocol (SPP): for structuring and transporting space data in a generic way. - Telecommand (TC) Space Data Link Protocol: for sending commands from ground to a satellite. - Telemetry (TM) Space Data Link Protocol: for returning telemetry from a satellite to the ground.\n\n\n\nThe SPP (CCSDS 133.0-B-2) is an Application Layer protocol for structuring and transporting data in the form of “space packets.”\n\n\n\n\n\n\n\ngraph TD\n    A[Packet Primary Header]\n    B[Packet Secondary Header]\n    C[Data Field]\n\n    A --&gt;|7 bytes| B\n    B --&gt;|variable| C\n\n\n\n\n\n\n\n\n\n\nApplication Identification through the APID (Application Process Identifier) field.\nData Flexibility: variable packet sizes for increased adaptability.\nIndependence from Lower Layers: can be used with different link protocols.\n\n\n\n\n\n\nThe TC Space Data Link Protocol (CCSDS 232.0-B-4) manages command communication from ground to satellites. It operates at the Data Link Layer.\n\n\n\n\n\n\n\ngraph TD\n    A[Master Channel]\n    B1[Virtual Channel 1]\n    B2[Virtual Channel 2]\n    C1[MAP Channel 1]\n    C2[MAP Channel 2]\n    C3[MAP Channel 3]\n\n    A --&gt; B1\n    A --&gt; B2\n    B1 --&gt; C1\n    B2 --&gt; C2\n    B2 --&gt; C3\n\n\n\n\n\n\n\n\n\n\nSegmentation and Multiplexing: data is split into multiple virtual channels.\nCommunication Control: ensures reliable delivery and integrity checks for commands.\nSecurity Support (SDLS) for protecting sensitive command data.\n\n\n\n\n\n\nThe TM Space Data Link Protocol (CCSDS 132.0-B-3) is used to send telemetry data from a satellite to the ground, also operating at the Data Link Layer.\n\n\n\n\n\n\n\ngraph LR\n    A[Satellite Data Source] -- Asynchronous Transmission --&gt; B[Virtual Channel]\n    B -- Synchronous Mode --&gt; C[Ground Reception]\n\n\n\n\n\n\n\n\n\n\nSupport for Virtual Channels to differentiate telemetry data streams.\nMultiplexing/Demultiplexing of data into master and virtual channels.\nSDLS Security Option to ensure the confidentiality and integrity of telemetry data.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProtocol\nOSI Layer\nMain Function\nSecurity\n\n\n\n\nSPP\nApplication\nTransporting data as packets\nN/A\n\n\nTC\nData Link\nSending commands\nSDLS Support\n\n\nTM\nData Link\nSending telemetry\nSDLS Support",
    "crumbs": [
      "Endurance Overview",
      "Space Packets Protocols"
    ]
  },
  {
    "objectID": "flatsat/spacepackets.html#space-packet-protocol-spp",
    "href": "flatsat/spacepackets.html#space-packet-protocol-spp",
    "title": "Space Packets Protocols",
    "section": "",
    "text": "The SPP (CCSDS 133.0-B-2) is an Application Layer protocol for structuring and transporting data in the form of “space packets.”\n\n\n\n\n\n\n\ngraph TD\n    A[Packet Primary Header]\n    B[Packet Secondary Header]\n    C[Data Field]\n\n    A --&gt;|7 bytes| B\n    B --&gt;|variable| C\n\n\n\n\n\n\n\n\n\n\nApplication Identification through the APID (Application Process Identifier) field.\nData Flexibility: variable packet sizes for increased adaptability.\nIndependence from Lower Layers: can be used with different link protocols.",
    "crumbs": [
      "Endurance Overview",
      "Space Packets Protocols"
    ]
  },
  {
    "objectID": "flatsat/spacepackets.html#telecommand-tc-space-data-link-protocol",
    "href": "flatsat/spacepackets.html#telecommand-tc-space-data-link-protocol",
    "title": "Space Packets Protocols",
    "section": "",
    "text": "The TC Space Data Link Protocol (CCSDS 232.0-B-4) manages command communication from ground to satellites. It operates at the Data Link Layer.\n\n\n\n\n\n\n\ngraph TD\n    A[Master Channel]\n    B1[Virtual Channel 1]\n    B2[Virtual Channel 2]\n    C1[MAP Channel 1]\n    C2[MAP Channel 2]\n    C3[MAP Channel 3]\n\n    A --&gt; B1\n    A --&gt; B2\n    B1 --&gt; C1\n    B2 --&gt; C2\n    B2 --&gt; C3\n\n\n\n\n\n\n\n\n\n\nSegmentation and Multiplexing: data is split into multiple virtual channels.\nCommunication Control: ensures reliable delivery and integrity checks for commands.\nSecurity Support (SDLS) for protecting sensitive command data.",
    "crumbs": [
      "Endurance Overview",
      "Space Packets Protocols"
    ]
  },
  {
    "objectID": "flatsat/spacepackets.html#telemetry-tm-space-data-link-protocol",
    "href": "flatsat/spacepackets.html#telemetry-tm-space-data-link-protocol",
    "title": "Space Packets Protocols",
    "section": "",
    "text": "The TM Space Data Link Protocol (CCSDS 132.0-B-3) is used to send telemetry data from a satellite to the ground, also operating at the Data Link Layer.\n\n\n\n\n\n\n\ngraph LR\n    A[Satellite Data Source] -- Asynchronous Transmission --&gt; B[Virtual Channel]\n    B -- Synchronous Mode --&gt; C[Ground Reception]\n\n\n\n\n\n\n\n\n\n\nSupport for Virtual Channels to differentiate telemetry data streams.\nMultiplexing/Demultiplexing of data into master and virtual channels.\nSDLS Security Option to ensure the confidentiality and integrity of telemetry data.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProtocol\nOSI Layer\nMain Function\nSecurity\n\n\n\n\nSPP\nApplication\nTransporting data as packets\nN/A\n\n\nTC\nData Link\nSending commands\nSDLS Support\n\n\nTM\nData Link\nSending telemetry\nSDLS Support",
    "crumbs": [
      "Endurance Overview",
      "Space Packets Protocols"
    ]
  }
]